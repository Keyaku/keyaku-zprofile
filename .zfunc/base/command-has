# Checks argument list for installed commands.
# Can make use of operators AND and OR.

emulate -L zsh

local usage=(
	"Usage: $(get_funcname) [OPTION...] COMMAND..."
	"\t[-h|--help] : Print this help message"
	"\t[-v] / [-q] : Increase / Decrease verbosity"
	"\t[-o|--or] : Logical OR operator. Default behavior. Checks if any of the commands are installed."
	"\t[-a|--and] : Logical AND operator. Checks if all of the commands are installed."
	"\t[-e|--exit] : Stops on the first non-installed command found. Behavior depends on the logical operator."
)

## Setup func opts
## FIXME: add flag for ignoring if command is alias
local f_help f_verbose f_quiet f_exit logical=or # default
zparseopts -D -F -K -- \
	{h,-help}=f_help \
	v+=f_verbose q+=f_quiet \
	{o,-or}=logical \
	{a,-and}=logical \
	|| return 1

## Help/usage message
if (( ! $# )) || [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

## Arg parsing
local verbosity=0
(( verbosity += ($#f_verbose - $#f_quiet) ))
logical=${logical##*-}

## function logic
local non_installed=()
while (( $# )); do
	command -v "$1" &>/dev/null || non_installed+=("$1")
	## Depending on the logical operator, stop for the first non-installed command
	if (( $verbosity )) && {
		{ (( $retval )) && [[ "$logical" =~ a(nd)? ]] } ||
		{ (( ! $retval )) && [[ "$logical" =~ o(r)? ]] }
	}; then
		break
	fi
	shift
done

## Print non-installed commands
if (( $verbosity )) && (( ${#non_installed} )); then
	>&2 echo "Non-installed commands:"
	>&2 echo "${non_installed}"
fi

(( ! ${#non_installed} ))
