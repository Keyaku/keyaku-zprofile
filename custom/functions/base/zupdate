# Check for zprofile git repo changes

emulate -L zsh

set -o err_return

if [[ -d "${ZDOTDIR}/.git" ]]; then
	command -v git &>/dev/null || return 1
else
	echo "No git repo found in ZDOTDIR (${ZDOTDIR}). This function does nothing."
	return 1
fi

local -r usage=(
	"Usage: ${funcstack[1]} [OPTION...]"
	"\t[-h|--help] : Print this help message"
	"\t[-v] / [-q] : Increase / Decrease verbosity"
)

## Setup parseopts
local f_help f_verbosity
zparseopts -D -F -K -- \
	{h,-help}=f_help \
	v+=f_verbosity q+=f_verbosity \
	|| return 1

## Help/usage message
if [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

### Arg parsing
# Verbosity
local -i verbosity=1 # defaults to some verbosity
f_verbosity="${(j::)f_verbosity//-}"
(( verbosity += (${#f_verbosity//q} - ${#${f_verbosity//v}}) ))

# Update main repo
local repo_name="$(git -C "${ZDOTDIR}" remote -v | sed -En '/fetch/s#^.+?github\.com[/:]\w+/([^.]+?)(\.git)?\s+.*$#\1#p')"
git -C "${ZDOTDIR}" fetch -q
local UPSTREAM='@{u}'
local LOCAL=$(git -C "${ZDOTDIR}" rev-parse @)
local REMOTE=$(git -C "${ZDOTDIR}" rev-parse "$UPSTREAM")
local BASE=$(git -C "${ZDOTDIR}" merge-base @ "$UPSTREAM")

(( $verbosity )) && >&2 printf '%s: ' "${repo_name}"
if [[ $LOCAL == $REMOTE ]]; then
	(( $verbosity )) && >&2 echo "Up-to-date"
elif [[ $LOCAL == $BASE ]]; then
	(( $verbosity )) && >&2 echo "Updating..."
	git -C "${ZDOTDIR}" pull ${f_verbosity:+-${f_verbosity}}
elif [[ $REMOTE == $BASE ]]; then
	(( $verbosity )) && >&2 echo "There are unpushed changes"
	return 2
else
	(( $verbosity )) && >&2 echo "Current branch has diverged from remote"
	return 3
fi

# Update submodules
(( $verbosity )) && >&2 echo "Updating submodules..."
git -C "${ZDOTDIR}" submodule -q update --init --recursive --remote
git -C "${ZDOTDIR}" submodule -q foreach --recursive 'git fetch -q'

# FIXME: The code below breaks ohmyzsh for some reason.
# local OUTDATED_SUBMODULES=$(git -C "${ZDOTDIR}" submodule foreach --recursive 'git rev-list HEAD...FETCH_HEAD' | \grep -v '^Entering')
# if [[ "${OUTDATED_SUBMODULES}" ]]; then
# 	(( $verbosity )) && >&2 echo "Updating submodules..."
# 	git -C "${ZDOTDIR}" submodule update --remote --recursive
# else
# 	(( $verbosity )) && >&2 echo "All submodules are up-to-date."
# fi
