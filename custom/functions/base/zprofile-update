# Check for zprofile git repo changes

emulate -L zsh

set -o err_return

if [[ -d "${ZDOTDIR}/.git" ]]; then
	command -v git &>/dev/null || return 1
else
	echo "No git repo found in ZDOTDIR (${ZDOTDIR}). This function does nothing."
	return 1
fi

local usage=(
	"Usage: $(get_funcname) [OPTION...]"
	"\t[-h|--help] : Print this help message"
	"\t[-v] / [-q] : Increase / Decrease verbosity"
)

## Setup parseopts
local f_help f_verbose f_quiet
zparseopts -D -F -K -- \
	{h,-help}=f_help \
	v+=f_verbose q+=f_quiet \
	|| return 1

## Help/usage message
if [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

# Set verbosity
local verbosity=1 # defaults to some verbosity
(( verbosity += ($#f_verbose - $#f_quiet) ))

function print_msg {
	(( $verbosity )) && echo "$@"
}

# Check for updates
[[ -d "${ZDOTDIR}/.git" ]] || return 1

# Update main repo
git -C "${ZDOTDIR}" fetch -q
local UPSTREAM='@{u}'
local LOCAL=$(git -C "${ZDOTDIR}" rev-parse @)
local REMOTE=$(git -C "${ZDOTDIR}" rev-parse "$UPSTREAM")
local BASE=$(git -C "${ZDOTDIR}" merge-base @ "$UPSTREAM")

if [[ $LOCAL == $REMOTE ]]; then
	print_msg "Up-to-date"
elif [[ $LOCAL == $BASE ]]; then
	print_msg "Updating..."
	git -C "${ZDOTDIR}" pull ${f_quiet} ${f_verbose}
elif [[ $REMOTE == $BASE ]]; then
	print_msg "There are unpushed changes"
	return 2
else
	print_msg "Current branch has diverged from remote"
	return 3
fi

# Update submodules
git -C "${ZDOTDIR}" submodule -q update --init --recursive
git -C "${ZDOTDIR}" submodule -q foreach --recursive 'git fetch -q'

local OUTDATED_SUBMODULES=$(git -C "${ZDOTDIR}" submodule foreach --recursive 'git rev-list HEAD...@{u}' | \grep -v '^Entering')
if [[ "${OUTDATED_SUBMODULES}" ]]; then
	print_msg "Updating submodules..."
	git -C "${ZDOTDIR}" submodule update --remote --recursive
	retval=$?
else
	print_msg "All submodules are up-to-date."
fi
