# Reloads files under profile.d

emulate -L zsh

setopt extendedglob

local -r usage=(
	"Usage: ${funcstack[1]} [OPTION...] [FILE...] [DIR...]"
	"\tReloads files under profile.d. Presumes \$ZDOTDIR/profile.d as root directory, meaning it can't load files outside of it (including local)"
	""
	"\t[-h|--help] : Print this help message"
	"\t[-v] / [-q] : Increase / Decrease verbosity"
	"\t[-a|--all] : Reload all files under profile.d. Supercedes any of the following options"
	"\t[-l|--login] : Reloads all files containing block for [[ -o login ]]. Stackable option"
	"\t[-i|--interactive] : Reloads all files containing block for [[ -o interactive ]]. Stackable option"
	"\t[-f|--file] FILE : Reloads the specified file(s) under profile.d. Stackable option"
	"\t[-d|--dir] DIR : Reloads all files under the specified directory(ies) under profile.d. Stackable option"
)

## Setup parseopts (with no extra arguments)
local void f_help f_verbose f_quiet f_all f_login f_interactive
local -aU f_dirs f_files
zparseopts -a void -D -F -K -- \
	{h,-help}=f_help \
	v+=f_verbose q+=f_quiet \
	{d,-dir}+:=f_dirs \
	{f,-file}+:=f_files \
	{a,-all}=f_all \
	{l,-login}=f_login \
	{i,-interactive}=f_interactive \
	|| return 1

## Help/usage message
if [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

## Arg parsing
local verbosity=0
(( verbosity += ($#f_verbose - $#f_quiet) ))
logical=${logical##*-}

local -r flags_set="${f_files[1]}${f_dirs[1]}${f_login}${f_interactive}"

# Prepare profiles to load
local -a flags_to_unset=(-f --file -d --dir)

f_files=(${${f_files:|flags_to_unset}:s/.zsh/})
f_dirs=(${f_dirs:|flags_to_unset})

local -aU profiles=()

# Load all profiles if specified
if [[ "$f_all" ]]; then
	profiles=( "$ZDOTDIR"/profile.d/{.*,^.}/**/*.zsh(-DN.) )
else
	# Load specified files/dirs from arguments
	[[ "$f_files" ]] && profiles+=( "$ZDOTDIR"/profile.d/{.*,^.}/**/((${(j:|:)~f_files}).zsh)(-DN.) )
	[[ "$f_dirs" ]]  && profiles+=( "$ZDOTDIR"/profile.d/**/(${(j:|:)~f_dirs})/**/*.zsh(-DN.) )

	# Load login/interactive profiles if specified
	[[ "$f_login" ]]       && profiles+=( $(\grep -rEl '\[?\[ -o login \]\]?' "$ZDOTDIR"/profile.d) )
	[[ "$f_interactive" ]] && profiles+=( $(\grep -rEl '\[?\[ -o interactive \]\]?' "$ZDOTDIR"/profile.d) )

	# Load any potential match from arguments, file or directory
	(( $# )) && profiles+=( "$ZDOTDIR"/profile.d/**/(${(j:|:)@}){,/**/*}.zsh(-DN.) )
fi


# If no profiles were set, do nothing
if (( ! ${#profiles} )); then
	if (( 1 <= $verbosity )); then
		if [[ "$flags_set" ]]; then
			print_fn -e "No valid profiles found with the specified flags"
		else
			print_fn -i "No profiles to source"
		fi
	fi
	[[ "$flags_set" ]]
	return $?
fi

# Shorten paths just for output
if (( 1 <= $verbosity )); then
	local s_profiles=(${profiles//"${ZDOTDIR}"/\$ZDOTDIR})
	(( 1 == $verbosity )) && s_profiles=(${s_profiles//"\$ZDOTDIR\/profile.d\/"})
	(( 2 <= $verbosity )) && printf "%s\n" "Sourcing the following profiles:"
	if (( ${#s_profiles} )); then
		(( 1 <= $verbosity )) && printf "%s\n" ${s_profiles}
	else
		(( 1 <= $verbosity )) && printf "%s\n" ${(j:, :)s_profiles}
	fi
fi

# Source resulting profiles
local arg
for arg in $profiles; do
	if ! source "$arg"; then
		(( 1 <= $verbosity )) && print_fn -e "error when sourcing '${arg//"${ZDOTDIR}"/\$ZDOTDIR}'"
		return 1
	fi
done
