# Reloads profiles and/or functions under $ZDOTDIR/custom and $ZDOTDIR/profile.d

emulate -L zsh
setopt extendedglob

[[ "$ZSH_CUSTOM" ]] || ZSH_CUSTOM="$ZDOTDIR/custom"

local -r usage=(
	"Usage: ${funcstack[1]} [OPTION...] [FILE...] [DIR...]"
	"Extension to shell built-in command 'source'."
	"Presumes \$ZDOTDIR/profile.d as default prefix."
	""
	"\t[-h|--help] : Print this help message"
	"\t[-v] / [-q] : Increase / Decrease verbosity"
	"\t[-a|--all] : Reload all profiles and functions. Same as using -efp"
	"\t[-f|--functions] : Reload all functions located under $ZSH_CUSTOM/functions"
	"\t[-e|--extensions] : Reload all extensions located under $ZDOTDIR/extensions"
	"\t[-p|--profiles] : Reload all profiles located under $ZDOTDIR/profile.d. Supercedes -l and -i"
	"\t[-l|--login] : Reload all files containing block for [[ -o login ]]. Stackable on the list of profiles"
	"\t[-i|--interactive] : Reload all files containing block for [[ -o interactive ]]. Stackable on the list of profiles"
)

## Setup parseopts (with no extra arguments)
local void f_help f_verbosity
local f_all f_func f_ext f_prof f_opts
zparseopts -a void -D -F -K -- \
	{h,-help}=f_help \
	v+=f_verbosity q+=f_verbosity \
	{a,-all}=f_all \
	{f,-functions}=f_func \
	{e,-extensions}=f_ext \
	{p,-profiles}=f_prof \
	{l,-login}=f_opts \
	{i,-interactive}=f_opts \
	|| return 1

## Help/usage message
if [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

### Arg parsing
# Verbosity
local -i verbosity=0
f_verbosity="${(j::)f_verbosity//-}"
(( verbosity += (${#f_verbosity//q} - ${#${f_verbosity//v}}) ))

# Set appropriate flags if -a was given
if [[ "$f_all" ]]; then
	f_func=(-f)
	f_ext=(-e)
	f_prof=(-p)
	f_opts=()
fi

# To check if there was an intended use of this command
local -r flags_set="${f_ext}${f_func}${f_prof}${f_opts}"

## Concerning profiles
local -aU _profiles=()

# Load all profiles if specified
if [[ "$f_prof" ]]; then
	_profiles=( "$ZDOTDIR/profile.d"/{.*,^.}/**/*.zsh(-DN.) )
else
	# Load login/interactive _profiles if specified
	(( ${f_opts[(I)-i]} )) && _profiles+=( $(\grep -rEl '\[?\[ -o login \]\]?' "$ZDOTDIR/profile.d") )
	(( ${f_opts[(I)-l]} )) && _profiles+=( $(\grep -rEl '\[?\[ -o interactive \]\]?' "$ZDOTDIR/profile.d") )

	# Load any potential match from arguments, file or directory
	if (( $# )); then
		# Match any files in $PWD
		_profiles+=(${${@%%.zsh}:A}(.zsh)#(.N))
		# Match any file under profile.d
		_profiles+=( "$ZDOTDIR/profile.d"/**/(${(j:|:)@%%.zsh}){,/**/*}.zsh(-DN.) )
	fi
fi

## Concerning functions
local -aU _functions=()

# List of function paths, sorted alphabetically, dotdirectories first
local -aU func_dirs=("$ZSH_CUSTOM"/functions/{.,^.}**{,/**}(-/FDN))

# Load all functions if specified
if [[ "$f_func" ]]; then
	# List of functions using previous directory search
	_functions=( ${^func_dirs}/*(-.DN:t) )
else
	# Load any potential match from arguments, file or directory
	if (( $# )); then
		# Match any file under $ZSH_CUSTOM/functions
		_functions+=( "$ZSH_CUSTOM"/functions/**/(${(j:|:)@}){,/**/*}(-DN.) )
	fi
fi

## Concerning extensions
local -aU _extensions=()
if [[ "$f_ext" ]]; then
	# FIXME: Remove '.plugin' extension
	_extensions=("$ZDOTDIR"/extensions/(*~example)/*.(plugin|ext).zsh(-.N:t))
fi

# If no profiles or functions were set, do nothing
local -ri num_sources=$((${#_profiles} + ${#_functions} + ${#_extensions}))

if (( 0 == ${num_sources} )); then
	# Check if no functions, profiles, extensions or arguments were given (read: nothing to source)
	[[ -z "${flags_set}" ]] && (( ! $# ))
	local retval=$?
	if (( 1 <= $verbosity )); then
		if (( ! $retval )); then
			print_fn -i "Nothing to source"
		else
			print_fn -e "No valid files found with the specified flags"
		fi
	fi
	return $retval
fi

# Shorten paths just for output
if (( 1 <= $verbosity )); then
	if (( ${#_profiles} )); then
		local s_profiles=(${_profiles//"${ZDOTDIR}"/\$ZDOTDIR})
		(( 1 == $verbosity )) && s_profiles=(${s_profiles//"\$ZDOTDIR\/profile.d\/"})
		(( 2 <= $verbosity )) && printf "%s\n" "Sourcing the following profiles:"
		(( 1 <= $verbosity )) && printf "%s\n" ${s_profiles}
	fi
	if (( ${#_functions} )); then
		(( 2 <= $verbosity )) && printf "%s\n" "Loading the following functions:"
		(( 1 <= $verbosity )) && printf "%s\n" ${_functions}
	fi
	if (( ${#_extensions} )); then
		(( 2 <= $verbosity )) && printf "%s\n" "Loading the following extensions:"
		(( 1 <= $verbosity )) && printf "%s\n" ${_extensions}
	fi
fi

# Reload collected functions
if (( ${#_functions} )); then
	# Correct fpath with yet-to-be set paths from custom/functions
	local -aU func_set=(${fpath:*func_dirs})
	if (( ${#func_dirs} != ${#func_set} )); then
		# Attempt to index paths right after $ZSH_CUSTOM/functions, or at the beginning if $ZSH_CUSTOM/functions is not yet set
		local -i fc_idx=${fpath[(i)$ZSH_CUSTOM/functions]}
		(( ${#fpath} < fc_idx )) && fc_idx=0

		# Only add paths not present in fpath
		fpath[${fc_idx}+1,0]=( ${func_dirs:|func_set} )
	fi

	local _functions_unload=(${(k)functions:*_functions})
	# Unload defined functions first
	(( ${#_functions_unload} )) && unfunction ${_functions_unload}

	# Autoload functions, suppressing alias expansion for functions and marking for zsh-style autoloading
	autoload -Uz ${_functions}
fi

# Source resulting profiles
local arg
for arg in $_profiles; do
	if ! source "$arg"; then
		(( 1 <= $verbosity )) && print_fn -e "error when sourcing '${arg//"${ZDOTDIR}"/\$ZDOTDIR}'"
		return 1
	fi
done

# Source resulting extensions
# FIXME: Remove '.plugin' extension
for arg in $_extensions; do
	source "$ZDOTDIR/extensions/${arg:r:r}/${arg}"
done

(( 0 < ${num_sources} ))
