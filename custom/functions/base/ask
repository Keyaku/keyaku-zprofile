# Prompt via read. Incorporates question and looping until non-empty REPLY

emulate -L zsh

local -r usage=(
	"Usage: $(get_funcname) [OPTION...] [(-p|--prompt) message]"
	"\t[-h|--help]"
	"\t[-B|--yn|--yesno] : Prompt for a binary yes/no answer. This overrides -o|--opts with '-o y -o n'"
	"\t[-k|--non-empty] : Prohibit empty answers"
	"\t[-p|--prompt] : Defines question for the prompt"
	"\t[-o|--opts] : Add possible answer(s)"
	"\t[-d|--default] : Make argument the default answer if empty"
	"\t[-s|--strict] : Paired with (-o|--options), will not allow any answer outside the available ones"
)

local -a valid_y=(yes ye y)
local -a valid_n=(no n)
local -a valid_yn=(${valid_y[@]} ${valid_n[@]})
local -a valid_yn_short=(y n)

## Setup parseopts
local f_help f_yesno f_nonEmpty f_prompt f_options f_default f_strict
zparseopts -D -E -F -K -- \
	{h,-help}=f_help \
	{B,-yn,-yesno}=f_yesno \
	{k,-non-empty}=f_nonEmpty \
	{p,-prompt}:=f_prompt \
	{o,-opts}+:=f_options \
	{d,-default}:=f_default \
	{s,-strict}=f_strict

## Help/usage message
if [[ "$f_help" ]]; then
	>&2 print -l $usage
	[[ "$f_help" ]]; return $?
fi

## Parse arguments
local v_prompt v_default v_options=()
[[ "${f_prompt}" ]] && v_prompt="${f_prompt[-1]}"
# If yesno was requested, override options and enable strict
[[ "${f_yesno}" ]] && {
	f_options=(-o${^valid_yn})
	f_strict=(-s)
}

[[ "${f_options}" ]] && {
	v_options=(${f_options//(-o|--opts)/})
}
local -a printed_opts=(${v_options})

[[ "${f_default}" ]] && {
	# If default was defined but nonEmpty is set to true, throw error
	if [[ "$f_nonEmpty" ]]; then
		print_fn -e "'-k' and '-d' are mutually exclusive"
		return 1
	fi
	v_default="${f_default[-1]:l}"
	# If going for yes/no, make sure the default is valid
	if [[ "${f_yesno}" ]] && ! array_has valid_yn "$v_default"; then
		print_fn -e "Invalid default value: '$v_default'"
		return 1
	fi

	## Uppercase default option
	if array_has printed_opts "${v_default:l}"; then
		local idx=${printed_opts[(i)${v_default:l}]}
		printed_opts[$idx]=("${v_default:u}")
	else
		printed_opts=("${v_default:u}" ${printed_opts})
	fi
}
# If strict was requested but there are no options, clear this flag
if [[ "$f_strict" ]] && (( ! ${#v_options} )); then
	f_strict=""
fi

## Read extra arguments
while (( $# )); do
	case $1 in
	-* ) print_fn -w "Invalid argument: '$1'"
	;;
	* )
		# if a number, consider it a time amount
		if [[ -z "$v_prompt" ]]; then
			v_prompt="${1}"
		else
			print_fn -w "Discarded argument: '%s'\n\t%s\n" "$1" "Prompt message already defined"
		fi
	;;
	esac
	shift
done

## Prepare prompt message

[[ "${f_yesno}" ]] && printed_opts=(${printed_opts//(yes|ye|no)/})

v_prompt="${v_prompt:+$v_prompt }${printed_opts:+[${(j:/:)printed_opts}]}"
[[ "${v_prompt}" ]] && v_prompt="${v_prompt}\n"

## Begin prompting
local -i retval=0
local v_answer
REPLY=""
while [[ -z "${v_answer}" ]]; do
	printf "${v_prompt}> "
	read

	if [[ "$f_nonEmpty" ]] && [[ -z "${REPLY}" ]]; then
		echo "Answer cannot be empty."
	elif [[ "${v_default}" ]]; then
		v_answer="${v_default}"
	elif [[ "$f_strict" ]] && ! array_has v_options "${REPLY:l}"; then
		printf "Invalid answer: '%s'\n" "${REPLY}"
	else
		v_answer="$REPLY"
		break
	fi
done
REPLY="$v_answer"

if [[ "$f_yesno" ]]; then
	REPLY="${REPLY:l}"
	array_has valid_y "${REPLY:l}"
	retval=$?
fi

return $retval

# vim: set ft=zsh:
